name: Testing nodeJS
on:
    workflow_dispatch:
    push:
        branches:
            - main
            - feature/*

env:
  MONGO_URI: mongodb+srv://kavya_db_user:kavya_db_user@cluster0.l4vp5oy.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}


jobs:
    # Unit-Testing:
    #     name: Unit Testing
    #     strategy:
    #       matrix:
    #         nodejs-version: [18,19]
    #         os: [ubuntu-latest,macos-latest]
    #         exclude:
    #           - nodejs-version: 18
    #             os: macos-latest

    #     runs-on: ${{ matrix.os}}
    #     steps:
    #         - name: check the code
    #           uses: actions/checkout@v4
            
    #         - name: set up NodeJs
    #           uses: actions/setup-node@v4
    #           with:
    #             node-version: ${{ matrix.nodejs-version }}

    #         - name: updating package.json
    #           run: npm install mongoose@latest express@latest mocha-junit-reporter@latest

    #         - name: install dependencies    
    #           run: npm install

    #         - name: unit testing
    #           id: nodejs-unit-test
    #           run: npm test

    #         - name: Archive test results
    #           if: steps.nodejs-unit-test.outcome == 'FAILURES' || steps.nodejs-unit-test.outcome == 'SUCcESS'
    #           uses: actions/upload-artifact@v4 # used to save the test results file in the repo
    #           with:
    #             name: mocha-test-results
    #             path: test-results.xml

    Code-coverage:
      name: Code Coverage
      runs-on: ubuntu-latest
      steps:
        - name: check the code
          uses: actions/checkout@v4
            
        - name: set up NodeJs
          uses: actions/setup-node@v4
          with:
            node-version: 18

        - name: cache packages
          uses: actions/cache@v4
          with:
            path: node_modules
            key: ${{ runner.os }}-node_modules-${{ hashFiles('package-lock.json') }}

        - name: install dependencies    
          run: npm install

        - name: code coverage
          continue-on-error: true
          run: npm run coverage

        - name: Archive test results
          uses: actions/upload-artifact@v4 # used to save the test results file in the repo
          with:
            name: code-coverage-result
            path: coverage
            rention-days: 5

    docker:
      name: containerzation
      needs: [ Code-coverage]
      runs-on: ubuntu-latest
      
      steps:
        - name: checkout repo
          uses: actions/checkout@v4

        - name: DockerHUB login
          uses: docker/login-action@v3
          with:
            username: ${{ vars.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}

        - name: build-and-test
          uses: docker/build-push-action@v4
          with:
            context: .
            push: false
            tags: ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}

        - name: Docker Image Testing
          run: |
            docker images
            docker run \
              -p 3000:3000 \
              -e MONGO_URI=$MONGO_URI \
              -e MONGO_USER=$MONGO_USER \
              -e MONGO_PASS=$MONGO_PASS \
              -e EMV_DOCKERHUB_USERNAME=${{ vars.DOCKER_USERNAME }} \
              ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}

            export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -q --filter ancestor=${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}))
            echo "Container IP: $IP"

            wget -qO- 127.0.0.1:3000/live | grep live
